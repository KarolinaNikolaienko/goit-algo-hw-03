# Завдання 1:

# Напишіть програму на Python, яка рекурсивно копіює файли у вихідній директорії,
# переміщає їх до нової директорії та сортує в піддиректорії,
# назви яких базуються на розширенні файлів.

# Також візьміть до уваги наступні умови:

# - Парсинг аргументів.
# Скрипт має приймати два аргументи командного рядка:
# шлях до вихідної директорії та шлях до директорії призначення (за замовчуванням,
# якщо тека призначення не була передана, вона повинна бути з назвою dist).
#
# - Рекурсивне читання директорій:
#   * Має бути написана функція, яка приймає шлях до директорії як аргумент.
#   * Функція має перебирати всі елементи у директорії.
#   * Якщо елемент є директорією, функція повинна викликати саму себе рекурсивно для цієї директорії.
#   * Якщо елемент є файлом, він має бути доступним для копіювання.
#
# - Копіювання файлів:
#   * Для кожного типу файлів має бути створений новий шлях у вихідній директорії,
#   використовуючи розширення файлу для назви піддиректорії.
#   * Файл з відповідним типом має бути скопійований у відповідну піддиректорію.
#
# - Обробка винятків.
# Код має правильно обробляти винятки, наприклад, помилки доступу до файлів або директорій.

from pathlib import Path
import shutil
import os

def copy_files(file: Path, destination) -> None:
    dest_path = destination.joinpath(os.path.splitext(file)[1].replace('.', ''))
    dest_path.mkdir(parents=True, exist_ok=True)
    shutil.copy(file, dest_path)

def read_files(path: Path, destination: Path):
    if path.is_dir():
        for child in path.iterdir():
            read_files(child, destination)
    else:
        copy_files(path, destination)

def main():
    path = input("Введіть вихідну директорію: ").strip()
    dest = input("Введіть нову директорію: ").strip()
    if path:
        path = Path(path)
        if not path.exists():
            print(f"Вихідного шляху {path} не існує")
            return
    
    if dest:
        dest = Path(dest)
        if not dest.exists():
            print(f"Шляху призначення {dest} не існує")
            return
        else:
            dest = dest.joinpath("dist") # створити папку dist у заданій директорії
    else:
        dest = Path("dist")
    read_files(path, dest)

if __name__ == "__main__":
    main()